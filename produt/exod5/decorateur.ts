//il y a plusieurs type de d√©corateur. les d√©corateus d'objet


function decorer(obj: User, method: string, descripteur: PropertyDescriptor) {
    console.log("Appelle du d√©corateur");
    console.log(descripteur);

    descripteur.value();
}

class User {
    constructor(
        private name: string = "Valeur par d√©faut"
    ) { }

    @decorer
    greet() {
        console.log(`salut ${this.name} üèç`);
    }
}

let u = new User("Golbert");
u.greet();


//Une classe en typeScript:

function logClass(target: any) {
    //target fait r√©f√©rence √† la qui est d√©co
    console.log(`classe ${target.name} a √©t√© d√©cor√©e.`);
}

@logClass
class Maclass {
    constructor() {
        console.log("Instance de MaClasse cr√©√©e");
    }
}




// Ex:
/**
 * NB: le d√©corateur ne s'applique que sur une classe ou dans une classe.
 * 1. classe: 
 * 2. propri√©t√©
 * 3. m√©thode
 * 4. accesseur (getter & setter)
 * 5. param√®tres d'une m√©thode
 */



// function classDecorateur() {
    
// };
// @classDecorateur
// @class Use {
//     constructor(){
//         console.log("construteur de Use...");
        
//     }
// }



function decorateur (target: Function) {
    console.log("apple du cod√©corateur");
}


@decorateur
class User1 {
    constructor(){
        console.log("constrcteur de User1");
        
    }
}

